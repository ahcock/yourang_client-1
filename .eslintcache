[{"/Users/sangrokpark/Desktop/Codestates/final-project/yourang_client/src/index.tsx":"1","/Users/sangrokpark/Desktop/Codestates/final-project/yourang_client/src/App.tsx":"2","/Users/sangrokpark/Desktop/Codestates/final-project/yourang_client/src/components/Home.tsx":"3","/Users/sangrokpark/Desktop/Codestates/final-project/yourang_client/src/components/BGMusic.tsx":"4","/Users/sangrokpark/Desktop/Codestates/final-project/yourang_client/src/components/SignInModal.tsx":"5","/Users/sangrokpark/Desktop/Codestates/final-project/yourang_client/src/components/SignUpModal.tsx":"6","/Users/sangrokpark/Desktop/Codestates/final-project/yourang_client/src/components/ErrorMessage.tsx":"7"},{"size":241,"mtime":1611283659655,"results":"8","hashOfConfig":"9"},{"size":282,"mtime":1611284434078,"results":"10","hashOfConfig":"9"},{"size":2683,"mtime":1611286000951,"results":"11","hashOfConfig":"9"},{"size":938,"mtime":1611294945480,"results":"12","hashOfConfig":"9"},{"size":4887,"mtime":1611194770978,"results":"13","hashOfConfig":"9"},{"size":8168,"mtime":1611283925943,"results":"14","hashOfConfig":"9"},{"size":574,"mtime":1611211944930,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"5ljsc4",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/Users/sangrokpark/Desktop/Codestates/final-project/yourang_client/src/index.tsx",[],["34","35"],"/Users/sangrokpark/Desktop/Codestates/final-project/yourang_client/src/App.tsx",["36","37"],"import React from 'react';\nimport Main from './container/Main';\nimport Navigation from './container/Navigation';\nimport Home from './components/Home';\n\nfunction App() {\n  return (\n    <>\n      <Home />\n      {/* <Navigation />\n      <Main /> */}\n    </>\n  );\n}\n\nexport default App;\n","/Users/sangrokpark/Desktop/Codestates/final-project/yourang_client/src/components/Home.tsx",["38"],"/Users/sangrokpark/Desktop/Codestates/final-project/yourang_client/src/components/BGMusic.tsx",["39"],"/Users/sangrokpark/Desktop/Codestates/final-project/yourang_client/src/components/SignInModal.tsx",["40","41","42"],"import React, { useState } from 'react';\nimport './SignInModal.css';\nimport googleIcon from '../image/google_icon.png';\nimport naverIcon from '../image/naver_icon.png';\nimport ErrorMessage from './ErrorMessage';\n\ninterface SignInModalProps {\n  signInModalHandler: (e: React.MouseEvent<HTMLElement>) => void;\n  signUpModalHandler: (e: React.MouseEvent<HTMLElement>) => void;\n}\n\nfunction SignInModal({\n  signInModalHandler,\n  signUpModalHandler,\n}: SignInModalProps) {\n  const [loginInfo, setLoginInfo] = useState({ userId: '', password: '' });\n  const [isValidFail, setIsValidFail] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const loginInfoHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.currentTarget;\n    setLoginInfo({ ...loginInfo, [name]: value });\n  };\n\n  const validationCheck = (e: React.MouseEvent<HTMLElement>) => {\n    // 유효성 검사 후 user가 확인 버튼을 눌렀을 때, LoginInfo를 초기화 하기 위한 로직\n    if (e.currentTarget.textContent === '확인') {\n      setLoginInfo({ userId: '', password: '' });\n    }\n\n    const error1 = '아아디와 비밀번호를 모두 입력해 주셔야 합니다.';\n    const error2 = '아이디 혹은 비밀번가 맞지않습니다. 다시 입력해 주세요.';\n    const { userId, password } = loginInfo;\n\n    if (!userId || !password) {\n      setIsValidFail(!isValidFail);\n      setErrorMessage(error1);\n    }\n  };\n\n  return (\n    <div className=\"signin-modal\">\n      <div className=\"signin-modal_container\">\n        <div className=\"signin-modal_container_content\">\n          <div className=\"signin-modal_container_content_head\">\n            <div\n              className=\"signin-modal_container_content_head_close-button\"\n              onClick={signInModalHandler}\n            >\n              +\n            </div>\n            <div className=\"signin-modal_container_content_head_title\">\n              Log in\n            </div>\n            <div className=\"empty-div-for-spacing\"></div>\n          </div>\n\n          <div className=\"signin-modal_container_content_body\">\n            <div className=\"signin-modal_container_content_body_upper\">\n              <div className=\"signin-modal_container_content_body__upper_input-field\">\n                <input\n                  type=\"text\"\n                  name=\"userId\"\n                  className=\"signin-modal_container_content_body__upper_input-field_id\"\n                  placeholder=\"User ID\"\n                  onChange={loginInfoHandler}\n                />\n                <input\n                  type=\"password\"\n                  name=\"password\"\n                  className=\"signin-modal_container_content_body__upper_input-field_password\"\n                  placeholder=\"Password\"\n                  onChange={loginInfoHandler}\n                />\n              </div>\n              <button\n                className=\"signin-modal_container_content_body__upper_login-button\"\n                onClick={validationCheck}\n              >\n                Log In\n              </button>\n            </div>\n\n            <div className=\"signin-modal_container_content_body_lower\">\n              <div className=\"signin-modal_container_content_body_lower_google-login\">\n                <img\n                  src={googleIcon}\n                  className=\"signin-modal_container_content_body_lower_google-login_icon\"\n                />\n                <div className=\"signin-modal_container_content_body_lower_google-login_message\">\n                  Continue with Google\n                </div>\n              </div>\n              <div className=\"signin-modal_container_content_body_lower_naver-login\">\n                <img\n                  src={naverIcon}\n                  className=\"signin-modal_container_content_body_lower_naver-login_icon\"\n                />\n                <div className=\"signin-modal_container_content_body_lower_naver-login_message\">\n                  Continue with Naver\n                </div>\n              </div>\n\n              <div className=\"signin-modal_container_content_body_lower_to-signup-group\">\n                <div className=\"signin-modal_container_content_body_lower_ask-for-signup\">\n                  아직 회원이 아니세요?\n                </div>\n                <button\n                  name=\"toSignUp\"\n                  type=\"button\"\n                  value=\"signup\"\n                  onClick={signUpModalHandler}\n                  className=\"signin-modal_container_content_body_lower_to-signup\"\n                >\n                  Sign up\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      {isValidFail ? (\n        <ErrorMessage\n          validationCheck={validationCheck}\n          errorMessage={errorMessage}\n        />\n      ) : null}\n    </div>\n  );\n}\n\nexport default SignInModal;\n","/Users/sangrokpark/Desktop/Codestates/final-project/yourang_client/src/components/SignUpModal.tsx",["43","44","45","46","47"],"import React, { useState } from 'react';\nimport { mobileValid } from './Helper/ValidationHelpers';\nimport axios from 'axios';\n\n//style\nimport './SignUpModal.css';\nimport googleIcon from '../image/google_icon.png';\nimport naverIcon from '../image/naver_icon.png';\n\n//components\nimport ErrorMessage from './ErrorMessage';\n\ninterface SignUpModalProps {\n  signInModalHandler: (e: React.MouseEvent<HTMLElement>) => void;\n  signUpModalHandler: (e: React.MouseEvent<HTMLElement>) => void;\n}\n\nfunction SignUpModal({\n  signInModalHandler,\n  signUpModalHandler,\n}: SignUpModalProps) {\n  const [signUpInfo, setSignUpInfo] = useState({\n    userId: '',\n    email: '',\n    mobile: '',\n    password: '',\n    confirmPassword: '',\n  });\n  const [isValidFail, setIsValidFail] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const signUpInfoHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    // input창에 입력한 내용 state로 저장하는 로직\n    const { name, value } = e.currentTarget;\n    setSignUpInfo({ ...signUpInfo, [name]: value });\n  };\n\n  const mobileInputHander = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    // mobile전용 유효성 검사 및 입력제한 로직(출력 예시: 000-0000-0000 숫자로만 입력됨. \"-\"는 자동입력 됨)\n    const { name, value, maxLength } = e.currentTarget;\n    let reg = new RegExp('^[0-9]');\n    if (reg.test(e.key)) {\n      if (value.length === 3 || value.length === 8) {\n        setSignUpInfo({ ...signUpInfo, [name]: value + '-' + e.key });\n      } else {\n        setSignUpInfo({\n          ...signUpInfo,\n          [name]: value.slice(0, maxLength) + e.key,\n        });\n      }\n    }\n\n    if (e.key === 'Backspace' && value.length === 9) {\n      setSignUpInfo({ ...signUpInfo, [name]: value.substring(0, 8) });\n    } else if (e.key === 'Backspace' && value.length === 4) {\n      setSignUpInfo({ ...signUpInfo, [name]: value.substring(0, 3) });\n    } else if (e.key === 'Backspace') {\n      setSignUpInfo({\n        ...signUpInfo,\n        [name]: value.substring(0, value.length - 1),\n      });\n    }\n  };\n\n  const validationCheck = (e: React.MouseEvent<HTMLElement>) => {\n    // Sign-up버튼을 눌렀을 때, signUpInfo를 바탕으로 진행하는 유효성 검사.\n    const { userId, email, mobile, password, confirmPassword } = signUpInfo;\n\n    const error1 = '입력정보를 모두 입력해 주셔야 합니다.';\n    const error2 = '아이디 혹은 비밀번가 맞지않습니다. 다시 입력해 주세요.';\n    const error3 = '비밀번호가 서로 일치하지 않습니다. 다시 입력해 주세요.';\n\n    if (password !== confirmPassword) {\n      setIsValidFail(!isValidFail);\n      setErrorMessage(error3);\n    }\n\n    if (!userId || !email || !mobile || !password || !confirmPassword) {\n      setIsValidFail(!isValidFail);\n      setErrorMessage(error1);\n    }\n\n    //유효성 검사에 문제가 없고, 모든 정보가 입력이 됐을 때, 서버에 사인업 요청하는 로직을 보내야 함.\n  };\n\n  // 아이디 중복체크 함수 만들어야 함\n  // 이메일 중복체크 함수 만들어야 함\n\n  return (\n    <div className=\"signup-modal\">\n      <div className=\"signup-modal_container\">\n        <div className=\"signup-modal_container_content\">\n          <div className=\"signup-modal_container_content_head\">\n            <div\n              className=\"signup-modal_container_content_head_close-button\"\n              onClick={signUpModalHandler}\n            >\n              +\n            </div>\n            <div className=\"signup-modal_container_content_head_title\">\n              Sign up\n            </div>\n            <div className=\"empty-div-for-spacing\"></div>\n          </div>\n\n          <div className=\"signup-modal_container_content_body\">\n            <div className=\"signup-modal_container_content_body_upper\">\n              <div className=\"signup-modal_container_content_body__upper_input-field\">\n                <div className=\"signup-modal_container_content_body__upper_input-field_id-group\">\n                  <input\n                    type=\"text\"\n                    name=\"userId\"\n                    className=\"signup-modal_container_content_body__upper_input-field_id\"\n                    placeholder=\"User ID\"\n                    onChange={signUpInfoHandler}\n                  />\n                  <button className=\"signup-modal_container_content_body__upper_input-field_id_confirm\">\n                    중복체크\n                  </button>\n                </div>\n\n                <div className=\"signup-modal_container_content_body__upper_input-field_email-group\">\n                  <input\n                    type=\"email\"\n                    name=\"email\"\n                    className=\"signup-modal_container_content_body__upper_input-field_email\"\n                    placeholder=\"Email\"\n                    onChange={signUpInfoHandler}\n                  />\n                  <button className=\"signup-modal_container_content_body__upper_input-field_email_confirm\">\n                    중복체크\n                  </button>\n                </div>\n\n                <input\n                  type=\"tel\"\n                  name=\"mobile\"\n                  className=\"signup-modal_container_content_body__upper_input-field_mobile\"\n                  placeholder=\"Mobile\"\n                  value={signUpInfo.mobile}\n                  // onChange={signUpInfoHandler}\n                  onKeyDown={mobileInputHander}\n                  maxLength={12}\n                />\n\n                <input\n                  type=\"password\"\n                  name=\"password\"\n                  className=\"signup-modal_container_content_body__upper_input-field_password\"\n                  placeholder=\"Password\"\n                  onChange={signUpInfoHandler}\n                />\n                <input\n                  type=\"password\"\n                  name=\"confirmPassword\"\n                  className=\"signup-modal_container_content_body__upper_input-field_password-confirm\"\n                  placeholder=\"Confirm password\"\n                  onChange={signUpInfoHandler}\n                />\n              </div>\n              <button\n                className=\"signup-modal_container_content_body__upper_login-button\"\n                onClick={validationCheck}\n              >\n                Sign up\n              </button>\n            </div>\n\n            <div className=\"signup-modal_container_content_body_lower\">\n              <div className=\"signup-modal_container_content_body_lower_google-login\">\n                <img\n                  src={googleIcon}\n                  className=\"signup-modal_container_content_body_lower_google-login_icon\"\n                />\n                <div className=\"signup-modal_container_content_body_lower_google-login_message\">\n                  Continue with Google\n                </div>\n              </div>\n              <div className=\"signup-modal_container_content_body_lower_naver-login\">\n                <img\n                  src={naverIcon}\n                  className=\"signup-modal_container_content_body_lower_naver-login_icon\"\n                />\n                <div className=\"signup-modal_container_content_body_lower_naver-login_message\">\n                  Continue with Naver\n                </div>\n              </div>\n\n              <div className=\"signup-modal_container_content_body_lower_to-login-group\">\n                <div className=\"signup-modal_container_content_body_lower_ask-for-login\">\n                  이미 회원이시라구요?\n                </div>\n                <button\n                  name=\"toSignIn\"\n                  type=\"button\"\n                  value=\"signin\"\n                  onClick={signInModalHandler}\n                  className=\"signup-modal_container_content_body_lower_to-login\"\n                >\n                  Log in\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      {isValidFail ? (\n        <ErrorMessage\n          validationCheck={validationCheck}\n          errorMessage={errorMessage}\n        />\n      ) : null}\n    </div>\n  );\n}\n\nexport default SignUpModal;\n","/Users/sangrokpark/Desktop/Codestates/final-project/yourang_client/src/components/ErrorMessage.tsx",[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":2,"column":8,"nodeType":"54","messageId":"55","endLine":2,"endColumn":12},{"ruleId":"52","severity":1,"message":"56","line":3,"column":8,"nodeType":"54","messageId":"55","endLine":3,"endColumn":18},{"ruleId":"52","severity":1,"message":"57","line":1,"column":17,"nodeType":"54","messageId":"55","endLine":1,"endColumn":26},{"ruleId":"52","severity":1,"message":"58","line":1,"column":38,"nodeType":"54","messageId":"55","endLine":1,"endColumn":48},{"ruleId":"52","severity":1,"message":"59","line":32,"column":11,"nodeType":"54","messageId":"55","endLine":32,"endColumn":17},{"ruleId":"60","severity":1,"message":"61","line":86,"column":17,"nodeType":"62","endLine":89,"endColumn":19},{"ruleId":"60","severity":1,"message":"61","line":95,"column":17,"nodeType":"62","endLine":98,"endColumn":19},{"ruleId":"52","severity":1,"message":"63","line":2,"column":10,"nodeType":"54","messageId":"55","endLine":2,"endColumn":21},{"ruleId":"52","severity":1,"message":"64","line":3,"column":8,"nodeType":"54","messageId":"55","endLine":3,"endColumn":13},{"ruleId":"52","severity":1,"message":"59","line":70,"column":11,"nodeType":"54","messageId":"55","endLine":70,"endColumn":17},{"ruleId":"60","severity":1,"message":"61","line":171,"column":17,"nodeType":"62","endLine":174,"endColumn":19},{"ruleId":"60","severity":1,"message":"61","line":180,"column":17,"nodeType":"62","endLine":183,"endColumn":19},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"@typescript-eslint/no-unused-vars","'Main' is defined but never used.","Identifier","unusedVar","'Navigation' is defined but never used.","'ReactNode' is defined but never used.","'MouseEvent' is defined but never used.","'error2' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'mobileValid' is defined but never used.","'axios' is defined but never used.","no-global-assign","no-unsafe-negation"]